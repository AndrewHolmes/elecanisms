import bootloadercmd as b

print("Creating a SCons build enviroment for the Microchip XC-16 family.")
env = Environment(PIC = '24FJ128GB206', 
                  CC = 'xc16-gcc', 
                  PROGSUFFIX = '.cof', 
                  CFLAGS = '-g -omf=coff -x c -mcpu=$PIC', 
                  LINKFLAGS = '-omf=coff -mcpu=$PIC -Wl,--script="../../link/app_p24FJ128GB206.gld"',
                  CPPPATH = '../lib')
env.PrependENVPath('PATH', '/Applications/microchip/xc16/v1.11/bin')

print('Creating builder to compile source...')
bin2hex = Builder(action = 'xc16-bin2hex $SOURCE -omf=coff',
                  suffix = 'hex', 
                  src_suffix = 'cof')
env.Append(BUILDERS = {'Hex' : bin2hex})

print('Creating builder to disassemble compiled code...')
list = Builder(action = 'xc16-objdump -S -D -omf=coff $SOURCE > $TARGET', 
               suffix = 'lst', 
               src_suffix = 'cof')
env.Append(BUILDERS = {'List' : list})


print('Creating builder to load hex file via bootloader...')
def load_function(target, source, env):
    bl = b.bootloadercmd()
    bl.import_hex('xltest.hex')
    bl.write_device()
    bl.bootloader.start_user()
    bl.bootloader.close()
    return None

load = Builder(action=load_function, 
               suffix = 'none',
               src_suffix = 'hex')
env.Append(BUILDERS = {'Load' : load})

env.Program('xltest', ['xltest.c', 
                       '../lib/usb.c',
                       '../lib/spi.c',
                       '../lib/ui.c',
                       '../lib/pin.c',
                       '../lib/timer.c', 
                       '../lib/descriptors.c'])

print('Compiling...')
env.Hex('xltest')
print('Disassembling...')
env.List('xltest')
print('Executing bootloader commands...')
env.Load('xltest')
